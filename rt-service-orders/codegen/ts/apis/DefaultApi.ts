/* tslint:disable */
/* eslint-disable */
/**
 * VH Candidates service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Candidate,
    CandidateFromJSON,
    CandidateToJSON,
    CandidateType,
    CandidateTypeFromJSON,
    CandidateTypeToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface ListCandidatesRequest {
    candidateID?: string;
    candidateName?: string;
    page?: number;
}

/**
 * no description
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * List types of candidates
     */
    async listCandidateTypesRaw(): Promise<runtime.ApiResponse<Array<CandidateType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/candidates/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CandidateTypeFromJSON));
    }

    /**
     * List types of candidates
     */
    async listCandidateTypes(): Promise<Array<CandidateType>> {
        const response = await this.listCandidateTypesRaw();
        return await response.value();
    }

    /**
     * List of candidates
     */
    async listCandidatesRaw(requestParameters: ListCandidatesRequest): Promise<runtime.ApiResponse<Array<Candidate>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.candidateID !== undefined) {
            queryParameters['candidateID'] = requestParameters.candidateID;
        }

        if (requestParameters.candidateName !== undefined) {
            queryParameters['candidateName'] = requestParameters.candidateName;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/candidates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CandidateFromJSON));
    }

    /**
     * List of candidates
     */
    async listCandidates(requestParameters: ListCandidatesRequest): Promise<Array<Candidate>> {
        const response = await this.listCandidatesRaw(requestParameters);
        return await response.value();
    }

}
